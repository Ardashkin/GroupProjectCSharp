//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReferenceUser {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceUser.IShopServiceBaseOf_User")]
    public interface IShopServiceBaseOf_User {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/Create", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/CreateResponse")]
        void Create(DomainModel.User item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/Create", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(DomainModel.User item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/GetItems", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/GetItemsResponse")]
        DomainModel.User[] GetItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/GetItems", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/GetItemsResponse")]
        System.Threading.Tasks.Task<DomainModel.User[]> GetItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/Update", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/UpdateResponse")]
        void Update(DomainModel.User item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/Update", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(DomainModel.User item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/Delete", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/DeleteResponse")]
        void Delete(DomainModel.User item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShopServiceBaseOf_User/Delete", ReplyAction="http://tempuri.org/IShopServiceBaseOf_User/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(DomainModel.User item);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShopServiceBaseOf_UserChannel : Client.ServiceReferenceUser.IShopServiceBaseOf_User, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShopServiceBaseOf_UserClient : System.ServiceModel.ClientBase<Client.ServiceReferenceUser.IShopServiceBaseOf_User>, Client.ServiceReferenceUser.IShopServiceBaseOf_User {
        
        public ShopServiceBaseOf_UserClient() {
        }
        
        public ShopServiceBaseOf_UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ShopServiceBaseOf_UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShopServiceBaseOf_UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShopServiceBaseOf_UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(DomainModel.User item) {
            base.Channel.Create(item);
        }
        
        public System.Threading.Tasks.Task CreateAsync(DomainModel.User item) {
            return base.Channel.CreateAsync(item);
        }
        
        public DomainModel.User[] GetItems() {
            return base.Channel.GetItems();
        }
        
        public System.Threading.Tasks.Task<DomainModel.User[]> GetItemsAsync() {
            return base.Channel.GetItemsAsync();
        }
        
        public void Update(DomainModel.User item) {
            base.Channel.Update(item);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(DomainModel.User item) {
            return base.Channel.UpdateAsync(item);
        }
        
        public void Delete(DomainModel.User item) {
            base.Channel.Delete(item);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(DomainModel.User item) {
            return base.Channel.DeleteAsync(item);
        }
    }
}
